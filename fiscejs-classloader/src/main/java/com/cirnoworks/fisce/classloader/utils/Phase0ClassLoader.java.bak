/**
 *  Copyright 2010 Yuxuan Huang. All rights reserved.
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.cirnoworks.fisce.classloader.utils;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedHashMap;
import java.util.Map;

import com.cirnoworks.fisce.data.ClassData;
import com.cirnoworks.fisce.data.FieldData;
import com.cirnoworks.fisce.data.MethodData;
import com.cirnoworks.fisce.data.constants.ConstantClassData;
import com.cirnoworks.fisce.data.constants.ConstantData;
import com.cirnoworks.fisce.data.constants.ConstantDoubleData;
import com.cirnoworks.fisce.data.constants.ConstantFloatData;
import com.cirnoworks.fisce.data.constants.ConstantIntegerData;
import com.cirnoworks.fisce.data.constants.ConstantLongData;
import com.cirnoworks.fisce.data.constants.ConstantReferenceData;
import com.cirnoworks.fisce.data.constants.ConstantStringData;
import com.cirnoworks.fisce.data.constants.internal.ConstantNameTypeInfoData;
import com.cirnoworks.fisce.data.constants.internal.ConstantUTF8Data;
import com.cirnoworks.fisce.vm.data.attributes.Attribute;
import com.cirnoworks.fisce.vm.data.attributes.AttributeCode;
import com.cirnoworks.fisce.vm.data.attributes.AttributeConstantValue;
import com.cirnoworks.fisce.vm.data.attributes.AttributeDeprecated;
import com.cirnoworks.fisce.vm.data.attributes.AttributeExceptions;
import com.cirnoworks.fisce.vm.data.attributes.AttributeInnerClasses;
import com.cirnoworks.fisce.vm.data.attributes.AttributeLineNumberTable;
import com.cirnoworks.fisce.vm.data.attributes.AttributeLocalVariableTable;
import com.cirnoworks.fisce.vm.data.attributes.AttributeSourceFile;
import com.cirnoworks.fisce.vm.data.attributes.AttributeSynthetic;
import com.cirnoworks.fisce.vm.data.attributes.AttributeUnknown;
import com.cirnoworks.fisce.vm.data.attributes.ExceptionHandler;
import com.cirnoworks.fisce.vm.data.attributes.InnerClass;
import com.cirnoworks.fisce.vm.data.attributes.LineNumber;
import com.cirnoworks.fisce.vm.data.attributes.LocalVariable;

/**
 * 
 * @author cloudee
 */
public final class Phase0ClassLoader {

	private static int getSizeFromDescriptor(String descriptor) {
		switch (descriptor.charAt(0)) {
		case 'J':
		case 'D':
			return 2;
		default:
			return 1;
		}
	}

	public static ClassData loadClassFromStream(InputStream is)
			throws IOException {

		DataInputStream dis = new DataInputStream(is);

		ClassData cb = new ClassData();
		cb.setMagic(dis.readInt());
		if (cb.getMagic() != 0xcafebabe) {
			throw new IOException("bad class id!");
		}
		cb.setMinorVersion(dis.readChar());
		cb.setMajorVersion(dis.readChar());

		int constantPoolSize = dis.readChar();
		cb.setConstantPool(new ConstantData[constantPoolSize]);
		for (int i = 1; i < constantPoolSize; i++) {
			//TODO
		}

		// Fill in the string fields
		ConstantData[] pool = cb.getConstantPool();
		{
			for (int i = 1, max = constantPoolSize; i < max; i++) {
				ConstantData c = pool[i];
				if (c != null && c instanceof ConstantNameTypeInfoData) {
					c.fillConstants(pool);
				}
			}
		}

		{
			for (int i = 1, max = constantPoolSize; i < max; i++) {
				ConstantData c = pool[i];
				if (c != null && c instanceof ConstantClassData) {
					c.fillConstants(pool);
				}
			}
		}

		{
			for (int i = 1, max = constantPoolSize; i < max; i++) {
				ConstantData c = pool[i];
				if (c != null && !(c instanceof ConstantNameTypeInfoData)
						&& !(c instanceof ConstantClassData)) {
					c.fillConstants(pool);
				}
			}
		}

		cb.setAccessFlags(dis.readChar());
		cb.setThisClassInfoIndex(dis.readChar());
		cb.setSuperClassInfoIndex(dis.readChar());

		cb.setName(((ConstantClassData) cb.getConstantPool()[cb
				.getThisClassInfoIndex()]).getName());

		char interfaceCount = dis.readChar();
		cb.setInterfaceInfoIndexs(new int[interfaceCount]);
		for (int i = 0; i < interfaceCount; i++) {
			cb.getInterfaceInfoIndexs()[i] = dis.readChar();
		}

		char fieldsCount = dis.readChar();
		cb.setFields(new FieldData[fieldsCount]);
		int fieldPos = 0;
		int staticPos = 0;
		for (int i = 0; i < fieldsCount; i++) {
			FieldData field = new FieldData();
			field.setAccessFlags(dis.readChar());

			int nameIndex = dis.readChar();
			int descriptorIndex = dis.readChar();

			field.setName(((ConstantUTF8Data) pool[nameIndex]).getString());
			field.setDescriptor(((ConstantUTF8Data) pool[descriptorIndex])
					.getString());

			Map<String, Attribute> attributes = fetchAttributes(dis, pool);
			AttributeConstantValue acv = (AttributeConstantValue) attributes
					.get("ConstantValue");
			if (acv != null) {
				field.setConstantValueIndex(acv.constantValueIndex);
			}

			int length = getSizeFromDescriptor(field.getDescriptor());
			field.setLength(length);
			if ((field.getAccessFlags() & ClassData.ACC_STATIC) == 0) {
				field.setPosition(fieldPos);
				fieldPos += length;
			} else {
				field.setPosition(staticPos);
				staticPos += length;
			}

			cb.getFields()[i] = field;
		}

		cb.setSizeInHeap(fieldPos);
		cb.setSizeInStatic(staticPos);

		char methodsCount = dis.readChar();
		cb.setMethods(new MethodData[methodsCount]);
		for (int i = 0; i < methodsCount; i++) {
			MethodData method = new MethodData();
			method.setAccessFlags(dis.readChar());

			int nameIndex = dis.readChar();
			int descriptorIndex = dis.readChar();

			method.setName(((ConstantUTF8Data) pool[nameIndex]).getString());
			method.setDescriptor(((ConstantUTF8Data) pool[descriptorIndex])
					.getString());

			Map<String, Attribute> attributes = fetchAttributes(dis, pool);
			AttributeCode code = (AttributeCode) attributes.get("Code");
			if ((method.getAccessFlags() & ClassData.ACC_NATIVE) != 0) {
				// native
			} else if (code == null) {
				if (((cb.getAccessFlags() & ClassData.ACC_INTERFACE) == 0)
						&& ((method.getAccessFlags() & ClassData.ACC_ABSTRACT) == 0)) {
					throw new IllegalArgumentException(
							"Not abstract and native method must have code!");
				}
			} else {
				method.setMaxStack(code.maxStack);
				method.setMaxLocals(code.maxLocals);
				method.setCode(code.code);
				method.setExceptionTable(code.exceptionTable);
				AttributeLineNumberTable lnt = (AttributeLineNumberTable) attributes
						.get("LineNumberTable");
				if (lnt != null) {
					method.setLineNumberTable(lnt.lineNumberTable);
				}
				AttributeLocalVariableTable lvt = (AttributeLocalVariableTable) attributes
						.get("LocalVariableTable");
				if (lvt != null) {
					method.setLocalVariableTable(lvt.localVariableTable);
				}
			}
			AttributeExceptions ae = (AttributeExceptions) attributes
					.get("Exceptions");
			if (ae == null) {
				method.setExceptionIdxes(new int[0]);
			} else {
				method.setExceptionIdxes(ae.exceptionIndexTable);
			}

			method.countParams();

			cb.getMethods()[i] = method;
		}

		Map<String, Attribute> attributes = fetchAttributes(dis, pool);
		AttributeSourceFile sf = (AttributeSourceFile) attributes
				.get("SourceFile");
		if (sf != null) {
			cb.setSourceFile(sf.sourceFile);
		}
		return cb;
	}

	// Very dirty, but works....
	private static Map<String, Attribute> fetchAttributes(DataInputStream dis,
			ConstantData[] pool) throws IOException {
		char count = dis.readChar();
		Map<String, Attribute> attributes = new LinkedHashMap<String, Attribute>();
		for (int i = 0; i < count; i++) {
			char attributeNameIndex = dis.readChar();
			String attributeName = ((ConstantUTF8Data) (pool[attributeNameIndex]))
					.getString();
			int attributeLength = dis.readInt();
			// context.println("Fetching attribute:" + attributeName);
			if (attributeName.equals("ConstantValue")) {
				AttributeConstantValue a = new AttributeConstantValue();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				a.constantValueIndex = dis.readChar();
				attributes.put(attributeName, a);
			} else if (attributeName.equals("Code")) {
				AttributeCode a = new AttributeCode();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				a.maxStack = dis.readChar();
				a.maxLocals = dis.readChar();
				a.code = new byte[dis.readInt()];
				dis.readFully(a.code);
				a.exceptionTable = new ExceptionHandler[dis.readChar()];
				for (int j = 0, max = a.exceptionTable.length; j < max; j++) {
					ExceptionHandler et = new ExceptionHandler();
					et.startPc = dis.readChar();
					et.endPc = dis.readChar();
					et.handlerPc = dis.readChar();
					et.catchClassIdx = dis.readChar();
					a.exceptionTable[j] = et;
				}
				Map<String, Attribute> codeAttributes = fetchAttributes(dis,
						pool);
				a.attributes = codeAttributes;
				attributes.put(attributeName, a);
			} else if (attributeName.equals("Exceptions")) {
				AttributeExceptions a = new AttributeExceptions();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				char exceptionsCount = dis.readChar();
				a.exceptionIndexTable = new int[exceptionsCount];

				for (int j = 0; j < exceptionsCount; j++) {
					char eid = dis.readChar();
					a.exceptionIndexTable[j] = eid;
				}
				attributes.put(attributeName, a);
			} else if (attributeName.equals("InnerClasses")) {
				AttributeInnerClasses a = new AttributeInnerClasses();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				int classesCount = dis.readChar();
				a.classes = new InnerClass[classesCount];
				for (int j = 0; j < classesCount; j++) {
					InnerClass ic = new InnerClass();
					ic.innerClassInfoIndex = dis.readChar();
					ic.outerClassInfoIndex = dis.readChar();
					int innerNameIndex = dis.readChar();
					ic.innerName = innerNameIndex == 0 ? null
							: ((ConstantUTF8Data) (pool[innerNameIndex]))
									.getString();
					ic.innerClassAccessFlag = dis.readChar();
					a.classes[j] = ic;
				}
				attributes.put(attributeName, a);
			} else if (attributeName.equals("Synthetic")) {
				AttributeSynthetic a = new AttributeSynthetic();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				attributes.put(attributeName, a);
			} else if (attributeName.equals("SourceFile")) {
				AttributeSourceFile a = new AttributeSourceFile();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				int sourceFileIndex = dis.readChar();
				a.sourceFile = ((ConstantUTF8Data) pool[sourceFileIndex])
						.getString();
				attributes.put(attributeName, a);
			} else if (attributeName.equals("LineNumberTable")) {
				AttributeLineNumberTable a = new AttributeLineNumberTable();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				char tableLength = dis.readChar();
				a.lineNumberTable = new LineNumber[tableLength];
				for (int j = 0; j < tableLength; j++) {
					LineNumber t = new LineNumber();
					t.startPc = dis.readChar();
					t.lineNumber = dis.readChar();
					a.lineNumberTable[j] = t;
				}
				attributes.put(attributeName, a);
			} else if (attributeName.equals("LocalVariableTable")) {
				AttributeLocalVariableTable a = new AttributeLocalVariableTable();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				char length = dis.readChar();
				a.localVariableTable = new LocalVariable[length];
				for (int j = 0; j < length; j++) {
					LocalVariable t = new LocalVariable();
					t.startPc = dis.readChar();
					t.length = dis.readChar();
					int nameIndex = dis.readChar();
					t.name = ((ConstantUTF8Data) pool[nameIndex]).getString();
					int descriptorIndex = dis.readChar();
					t.descriptor = ((ConstantUTF8Data) pool[descriptorIndex])
							.getString();
					t.index = dis.readChar();
					a.localVariableTable[j] = t;
				}
				attributes.put(attributeName, a);
			} else if (attributeName.equals("Deprecated")) {
				AttributeDeprecated a = new AttributeDeprecated();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				attributes.put(attributeName, a);
			} else {
				AttributeUnknown a = new AttributeUnknown();
				a.attributeName = attributeName;
				a.attributeLength = attributeLength;

				a.data = new byte[attributeLength];
				dis.readFully(a.data);
				attributes.put(attributeName, a);
			}
		}
		return attributes;
	}
}
